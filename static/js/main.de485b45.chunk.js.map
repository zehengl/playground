{"version":3,"sources":["Components/ColorApp.js","Components/Header.js","App.js","serviceWorker.js","index.js"],"names":["ColorApp","colors","black","blue","brown","green","orange","pink","purple","white","yellow","createColoredDiv","color","styled","div","_templateObject","_this2","this","ColorDivs","Object","keys","sort","Math","random","map","name","ColorDiv","react_default","a","createElement","key","className","react_fullpage_default","render","Wrapper","Div","Component","Header","Helmet","charset","content","rel","href","defer","src","Home","App","Components_Header","BrowserRouter","basename","process","role","aria-label","NavLink","to","activeStyle","cursor","opacity","textDecoration","pointerEvents","Route","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sYAsDeA,6MAhDbC,OAAS,CACPC,MAAO,UACPC,KAAM,UACNC,MAAO,UACPC,MAAO,UACPC,OAAQ,UACRC,KAAM,UACNC,OAAQ,UACRC,MAAO,UACPC,OAAQ,aAGVC,iBAAmB,SAAAC,GACjB,OAAOC,IAAOC,IAAdC,IACsBH,4EAKf,IAAAI,EAAAC,KAGDC,EAFQC,OAAOC,KAAKH,KAAKhB,QAAQoB,KAAK,iBAAM,GAAMC,KAAKC,WAErCC,IAAI,SAAAC,GAC1B,IAAMC,EAAWV,EAAKL,iBAAiBK,EAAKf,OAAOwB,IACnD,OACEE,EAAAC,EAAAC,cAACH,EAAD,CACEI,IAAKL,EACLM,UAAU,kDAEVJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,aAAaN,MAKhC,OACEE,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CACEK,OAAQ,WACN,OACEN,EAAAC,EAAAC,cAACG,EAAAJ,EAAcM,QAAf,KACGhB,EAAUM,IAAI,SAAAW,GAAG,OAAIA,eAxCbC,qBCmBRC,mLAlBX,OACEV,EAAAC,EAAAC,cAACS,EAAA,OAAD,KACEX,EAAAC,EAAAC,cAAA,QAAMU,QAAQ,UACdZ,EAAAC,EAAAC,cAAA,QAAMJ,KAAK,WAAWe,QAAQ,wCAC9Bb,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,QACEY,IAAI,aACJC,KAAK,yEAEPf,EAAAC,EAAAC,cAAA,UACEc,OAAK,EACLC,IAAI,kEAbOR,aCErB,SAASS,IACP,OACElB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,oDACbJ,EAAAC,EAAAC,cAAA,qBA2CSiB,mLApCX,OACEnB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACkB,EAAD,MACApB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CAAQC,SAAUC,eAChBvB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OACEE,UAAU,SACVoB,KAAK,aACLC,aAAW,mBAEXzB,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CAASC,GAAG,IAAIvB,UAAU,eAA1B,QAGAJ,EAAAC,EAAAC,cAACwB,EAAA,EAAD,CACEC,GAAG,SACHvB,UAAU,cACVwB,YAAa,CACXC,OAAQ,cACRC,QAAS,GACTC,eAAgB,OAChBC,cAAe,SAPnB,UAcFhC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWlB,IACjClB,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,CAAOE,KAAK,SAASC,UAAW/D,cA9B1BoC,aCFE4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASpC,OAAON,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.de485b45.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport ReactFullpage from \"@fullpage/react-fullpage\";\nimport styled from \"styled-components\";\n\nclass ColorApp extends Component {\n  colors = {\n    black: \"#000000\",\n    blue: \"#19B5FE\",\n    brown: \"#8B4513\",\n    green: \"#00E640\",\n    orange: \"#F89406\",\n    pink: \"#FF69B4\",\n    purple: \"#8C14FC\",\n    white: \"#FFFFFF\",\n    yellow: \"#FFFF7E\"\n  };\n\n  createColoredDiv = color => {\n    return styled.div`\n      background-color: ${color};\n      color: grey;\n    `;\n  };\n\n  render() {\n    const names = Object.keys(this.colors).sort(() => 0.5 - Math.random());\n\n    const ColorDivs = names.map(name => {\n      const ColorDiv = this.createColoredDiv(this.colors[name]);\n      return (\n        <ColorDiv\n          key={name}\n          className=\"section has-text-centered has-text-weight-bold\"\n        >\n          <p className=\"is-size-1\">{name}</p>\n        </ColorDiv>\n      );\n    });\n\n    return (\n      <ReactFullpage\n        render={() => {\n          return (\n            <ReactFullpage.Wrapper>\n              {ColorDivs.map(Div => Div)}\n            </ReactFullpage.Wrapper>\n          );\n        }}\n      />\n    );\n  }\n}\n\nexport default ColorApp;\n","import React, { Component } from \"react\";\n\nimport { Helmet } from \"react-helmet\";\n\nclass Header extends Component {\n  render() {\n    return (\n      <Helmet>\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <title>Playground</title>\n        <link\n          rel=\"stylesheet\"\n          href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.2/css/bulma.min.css\"\n        />\n        <script\n          defer\n          src=\"https://use.fontawesome.com/releases/v5.3.1/js/all.js\"\n        />\n      </Helmet>\n    );\n  }\n}\n\nexport default Header;\n","import { NavLink, Route, BrowserRouter as Router } from \"react-router-dom\";\nimport React, { Component } from \"react\";\n\nimport ColorApp from \"./Components/ColorApp\";\nimport Header from \"./Components/Header\";\n\nfunction Home() {\n  return (\n    <div className=\"has-text-centered has-text-weight-bold is-size-1\">\n      <h1>;)</h1>\n    </div>\n  );\n}\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Header />\n        <Router basename={process.env.PUBLIC_URL}>\n          <div>\n            <nav\n              className=\"navbar\"\n              role=\"navigation\"\n              aria-label=\"main navigation\"\n            >\n              <NavLink to=\"/\" className=\"navbar-item\">\n                Home\n              </NavLink>\n              <NavLink\n                to=\"/color\"\n                className=\"navbar-item\"\n                activeStyle={{\n                  cursor: \"not-allowed\",\n                  opacity: 0.2,\n                  textDecoration: \"none\",\n                  pointerEvents: \"none\"\n                }}\n              >\n                Color\n              </NavLink>\n            </nav>\n\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/color\" component={ColorApp} />\n          </div>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}