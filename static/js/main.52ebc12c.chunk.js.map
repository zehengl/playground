{"version":3,"sources":["Components/ColorApp.js","Components/Header.js","Components/NumberApp.js","Components/ShapeApp.js","App.js","serviceWorker.js","index.js"],"names":["ColorApp","colors","black","blue","brown","green","orange","pink","purple","white","yellow","createColoredDiv","color","styled","div","_templateObject","_this2","this","ColorDivs","Object","keys","sort","Math","random","map","name","ColorDiv","react_default","a","createElement","key","className","react_fullpage_default","loopBottom","loopTop","render","Wrapper","Div","Component","Header","Helmet","charset","content","rel","href","defer","src","NumberApp","toConsumableArray","Array","number","ShapeApp","getRadius","radiusMax","window","innerWidth","radiusMin","handleDragStart","e","target","setAttrs","scaleX","scaleY","handleDragEnd","to","duration","easing","Konva","Easings","BounceEaseOut","ReactKonva","width","height","innerHeight","draggable","x","y","fill","Util","getRandomColor","shadowBlur","shadowOpacity","onDragStart","onDragEnd","radius","numPoints","innerRadius","outerRadius","radiusX","radiusY","sides","Home","App","activeStyle","cursor","opacity","textDecoration","pointerEvents","Components_Header","BrowserRouter","basename","process","role","aria-label","NavLink","Route","exact","path","component","Boolean","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.52ebc12c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nimport ReactFullpage from \"@fullpage/react-fullpage\";\nimport styled from \"styled-components\";\n\nclass ColorApp extends Component {\n  colors = {\n    black: \"#000000\",\n    blue: \"#19B5FE\",\n    brown: \"#8B4513\",\n    green: \"#00E640\",\n    orange: \"#F89406\",\n    pink: \"#FF69B4\",\n    purple: \"#8C14FC\",\n    white: \"#FFFFFF\",\n    yellow: \"#FFFF7E\"\n  };\n\n  createColoredDiv = color => {\n    return styled.div`\n      background-color: ${color};\n      color: grey;\n    `;\n  };\n\n  render() {\n    const names = Object.keys(this.colors).sort(() => 0.5 - Math.random());\n\n    const ColorDivs = names.map(name => {\n      const ColorDiv = this.createColoredDiv(this.colors[name]);\n      return (\n        <ColorDiv\n          key={name}\n          className=\"section has-text-centered has-text-weight-bold\"\n        >\n          <p className=\"is-size-1\">{name}</p>\n        </ColorDiv>\n      );\n    });\n\n    return (\n      <ReactFullpage\n        loopBottom\n        loopTop\n        render={() => {\n          return (\n            <ReactFullpage.Wrapper>\n              {ColorDivs.map(Div => Div)}\n            </ReactFullpage.Wrapper>\n          );\n        }}\n      />\n    );\n  }\n}\n\nexport default ColorApp;\n","import React, { Component } from \"react\";\n\nimport { Helmet } from \"react-helmet\";\n\nclass Header extends Component {\n  render() {\n    return (\n      <Helmet>\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <title>Playground</title>\n        <link\n          rel=\"stylesheet\"\n          href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.2/css/bulma.min.css\"\n        />\n        <script\n          defer\n          src=\"https://use.fontawesome.com/releases/v5.3.1/js/all.js\"\n        />\n      </Helmet>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\n\nimport ReactFullpage from \"@fullpage/react-fullpage\";\n\nclass NumberApp extends Component {\n  render() {\n    return (\n      <ReactFullpage\n        loopBottom\n        loopTop\n        render={() => {\n          return (\n            <ReactFullpage.Wrapper>\n              {[...Array(10).keys()].map(number => (\n                <div className=\"section has-text-centered has-text-weight-bold\">\n                  <p className=\"is-size-1\">{number + 1}</p>\n                </div>\n              ))}\n            </ReactFullpage.Wrapper>\n          );\n        }}\n      />\n    );\n  }\n}\n\nexport default NumberApp;\n","import {\n  Circle,\n  Ellipse,\n  Layer,\n  Rect,\n  RegularPolygon,\n  Stage,\n  Star\n} from \"react-konva\";\nimport React, { Component } from \"react\";\n\nimport Konva from \"konva\";\n\nclass ShapeApp extends Component {\n  getRadius = () => {\n    let radiusMax = window.innerWidth * 0.06;\n    let radiusMin = window.innerWidth * 0.04;\n    return Math.random() * (radiusMax - radiusMin) + radiusMin;\n  };\n\n  handleDragStart = e => {\n    e.target.setAttrs({\n      scaleX: 1.2,\n      scaleY: 1.2\n    });\n  };\n\n  handleDragEnd = e => {\n    e.target.to({\n      duration: 0.5,\n      easing: Konva.Easings.BounceEaseOut,\n      scaleX: 1,\n      scaleY: 1\n    });\n  };\n\n  render() {\n    return (\n      <Stage width={window.innerWidth} height={window.innerHeight}>\n        <Layer>\n          <Rect\n            draggable\n            x={window.innerWidth * Math.random()}\n            y={window.innerHeight * Math.random()}\n            fill={Konva.Util.getRandomColor()}\n            shadowBlur={10 * Math.random()}\n            shadowOpacity={Math.random()}\n            onDragStart={this.handleDragStart}\n            onDragEnd={this.handleDragEnd}\n            width={this.getRadius()}\n            height={this.getRadius()}\n          />\n          <Rect\n            draggable\n            x={window.innerWidth * Math.random()}\n            y={window.innerHeight * Math.random()}\n            fill={Konva.Util.getRandomColor()}\n            shadowBlur={10 * Math.random()}\n            shadowOpacity={Math.random()}\n            onDragStart={this.handleDragStart}\n            onDragEnd={this.handleDragEnd}\n            width={this.getRadius() * 2}\n            height={this.getRadius()}\n          />\n          <Circle\n            draggable\n            x={window.innerWidth * Math.random()}\n            y={window.innerHeight * Math.random()}\n            fill={Konva.Util.getRandomColor()}\n            shadowBlur={10 * Math.random()}\n            shadowOpacity={Math.random()}\n            onDragStart={this.handleDragStart}\n            onDragEnd={this.handleDragEnd}\n            radius={this.getRadius()}\n          />\n          <Star\n            draggable\n            x={window.innerWidth * Math.random()}\n            y={window.innerHeight * Math.random()}\n            fill={Konva.Util.getRandomColor()}\n            shadowBlur={10 * Math.random()}\n            shadowOpacity={Math.random()}\n            onDragStart={this.handleDragStart}\n            onDragEnd={this.handleDragEnd}\n            numPoints={5}\n            innerRadius={this.getRadius() / 2}\n            outerRadius={this.getRadius()}\n          />\n          <Ellipse\n            draggable\n            x={window.innerWidth * Math.random()}\n            y={window.innerHeight * Math.random()}\n            fill={Konva.Util.getRandomColor()}\n            shadowBlur={10 * Math.random()}\n            shadowOpacity={Math.random()}\n            onDragStart={this.handleDragStart}\n            onDragEnd={this.handleDragEnd}\n            radiusX={this.getRadius() * 2}\n            radiusY={this.getRadius()}\n          />\n          <RegularPolygon\n            draggable\n            x={window.innerWidth * Math.random()}\n            y={window.innerHeight * Math.random()}\n            fill={Konva.Util.getRandomColor()}\n            shadowBlur={10 * Math.random()}\n            shadowOpacity={Math.random()}\n            onDragStart={this.handleDragStart}\n            onDragEnd={this.handleDragEnd}\n            sides={5}\n            radius={this.getRadius()}\n          />\n        </Layer>\n      </Stage>\n    );\n  }\n}\nexport default ShapeApp;\n","import { NavLink, Route, BrowserRouter as Router } from \"react-router-dom\";\nimport React, { Component } from \"react\";\n\nimport ColorApp from \"./Components/ColorApp\";\nimport Header from \"./Components/Header\";\nimport NumberApp from \"./Components/NumberApp\";\nimport ShapeApp from \"./Components/ShapeApp\";\n\nfunction Home() {\n  return (\n    <div className=\"has-text-centered has-text-weight-bold is-size-1\">\n      <h1>for ada</h1>\n    </div>\n  );\n}\n\nclass App extends Component {\n  activeStyle = {\n    cursor: \"not-allowed\",\n    opacity: 0.2,\n    textDecoration: \"none\",\n    pointerEvents: \"none\"\n  };\n\n  render() {\n    return (\n      <div>\n        <Header />\n        <Router basename={process.env.PUBLIC_URL}>\n          <div>\n            <nav\n              className=\"navbar\"\n              role=\"navigation\"\n              aria-label=\"main navigation\"\n            >\n              <NavLink to=\"/\" className=\"navbar-item\">\n                Home\n              </NavLink>\n              <NavLink\n                to=\"/number\"\n                className=\"navbar-item\"\n                activeStyle={this.activeStyle}\n              >\n                Number\n              </NavLink>\n              <NavLink\n                to=\"/shape\"\n                className=\"navbar-item\"\n                activeStyle={this.activeStyle}\n              >\n                Shape\n              </NavLink>\n              <NavLink\n                to=\"/color\"\n                className=\"navbar-item\"\n                activeStyle={this.activeStyle}\n              >\n                Color\n              </NavLink>\n            </nav>\n\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/number\" component={NumberApp} />\n            <Route path=\"/shape\" component={ShapeApp} />\n            <Route path=\"/color\" component={ColorApp} />\n          </div>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}